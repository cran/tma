// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// choose_two
int choose_two(int n);
RcppExport SEXP _tma_choose_two(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(choose_two(n));
    return rcpp_result_gen;
END_RCPP
}
// accumulate_network
Rcpp::List accumulate_network(std::string unit, SEXP unit_rows_sexp, Rcpp::NumericVector code_cols, Rcpp::Function decay_function, int time_col, bool ordered);
RcppExport SEXP _tma_accumulate_network(SEXP unitSEXP, SEXP unit_rows_sexpSEXP, SEXP code_colsSEXP, SEXP decay_functionSEXP, SEXP time_colSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< SEXP >::type unit_rows_sexp(unit_rows_sexpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type code_cols(code_colsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type decay_function(decay_functionSEXP);
    Rcpp::traits::input_parameter< int >::type time_col(time_colSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulate_network(unit, unit_rows_sexp, code_cols, decay_function, time_col, ordered));
    return rcpp_result_gen;
END_RCPP
}
// accumulate_networks
Rcpp::List accumulate_networks(Rcpp::List x, Rcpp::NumericVector code_cols, Rcpp::Function decay_function, int time_col, bool ordered);
RcppExport SEXP _tma_accumulate_networks(SEXP xSEXP, SEXP code_colsSEXP, SEXP decay_functionSEXP, SEXP time_colSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type code_cols(code_colsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type decay_function(decay_functionSEXP);
    Rcpp::traits::input_parameter< int >::type time_col(time_colSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(accumulate_networks(x, code_cols, decay_function, time_col, ordered));
    return rcpp_result_gen;
END_RCPP
}
// calculate_adjacency_matrix
arma::mat calculate_adjacency_matrix(arma::rowvec ground, arma::rowvec response, double response_weight, bool ordered);
RcppExport SEXP _tma_calculate_adjacency_matrix(SEXP groundSEXP, SEXP responseSEXP, SEXP response_weightSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type ground(groundSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type response(responseSEXP);
    Rcpp::traits::input_parameter< double >::type response_weight(response_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_adjacency_matrix(ground, response, response_weight, ordered));
    return rcpp_result_gen;
END_RCPP
}
// adjacency_matrix_to_vector
arma::rowvec adjacency_matrix_to_vector(arma::mat x, bool full);
RcppExport SEXP _tma_adjacency_matrix_to_vector(SEXP xSEXP, SEXP fullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    rcpp_result_gen = Rcpp::wrap(adjacency_matrix_to_vector(x, full));
    return rcpp_result_gen;
END_RCPP
}
// calculate_1d_index_rev
int calculate_1d_index_rev(const std::vector<int>& indices, const std::vector<int>& dims);
RcppExport SEXP _tma_calculate_1d_index_rev(SEXP indicesSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_1d_index_rev(indices, dims));
    return rcpp_result_gen;
END_RCPP
}
// calculate_1d_index
int calculate_1d_index(const std::vector<int>& indices, const std::vector<int>& dims);
RcppExport SEXP _tma_calculate_1d_index(SEXP indicesSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_1d_index(indices, dims));
    return rcpp_result_gen;
END_RCPP
}
// apply_tensor
Rcpp::List apply_tensor(Rcpp::NumericVector tensor, Rcpp::IntegerVector dims, std::vector<int> dims_sender, std::vector<int> dims_receiver, std::vector<int> dims_mode, Rcpp::NumericMatrix context_matrix, std::vector<int> unit_rows, arma::mat codes, Rcpp::NumericVector times, bool ordered);
RcppExport SEXP _tma_apply_tensor(SEXP tensorSEXP, SEXP dimsSEXP, SEXP dims_senderSEXP, SEXP dims_receiverSEXP, SEXP dims_modeSEXP, SEXP context_matrixSEXP, SEXP unit_rowsSEXP, SEXP codesSEXP, SEXP timesSEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type tensor(tensorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims_sender(dims_senderSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims_receiver(dims_receiverSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dims_mode(dims_modeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type context_matrix(context_matrixSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type unit_rows(unit_rowsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type codes(codesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< bool >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_tensor(tensor, dims, dims_sender, dims_receiver, dims_mode, context_matrix, unit_rows, codes, times, ordered));
    return rcpp_result_gen;
END_RCPP
}
// triIndices
arma::umat triIndices(int len, int row);
RcppExport SEXP _tma_triIndices(SEXP lenSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(triIndices(len, row));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tma_choose_two", (DL_FUNC) &_tma_choose_two, 1},
    {"_tma_accumulate_network", (DL_FUNC) &_tma_accumulate_network, 6},
    {"_tma_accumulate_networks", (DL_FUNC) &_tma_accumulate_networks, 5},
    {"_tma_calculate_adjacency_matrix", (DL_FUNC) &_tma_calculate_adjacency_matrix, 4},
    {"_tma_adjacency_matrix_to_vector", (DL_FUNC) &_tma_adjacency_matrix_to_vector, 2},
    {"_tma_calculate_1d_index_rev", (DL_FUNC) &_tma_calculate_1d_index_rev, 2},
    {"_tma_calculate_1d_index", (DL_FUNC) &_tma_calculate_1d_index, 2},
    {"_tma_apply_tensor", (DL_FUNC) &_tma_apply_tensor, 10},
    {"_tma_triIndices", (DL_FUNC) &_tma_triIndices, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
